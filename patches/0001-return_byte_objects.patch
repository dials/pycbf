From e8b4152e39a12f540201d56fbabbeb81344be73e Mon Sep 17 00:00:00 2001
From: Nicholas Devenish <ndevenish@gmail.com>
Date: Sat, 21 Nov 2020 23:52:24 +0000
Subject: [PATCH] Return explicit byte objects for appropriate functions, even
 on python 3

Add bytestring_output_allocate_size, and use for appropriate functions.
This means that you don't need to set SWIG_PYTHON_STRICT_BYTE_CHAR,
which means that you can pass strings to functions that accept them
whilst also retrieving byte data objects without having to convert
to/from unicode representations.

The functions this is applied to are:
    get_integerarray_as_string
    get_image_as_string
    get_image_fs_as_string
    get_image_sf_as_string
    get_real_image_as_string
    get_real_image_fs_as_string
    get_real_image_sf_as_string
    get_3d_image_as_string
    get_3d_image_fs_as_string
    get_3d_image_sf_as_string
    get_real_3d_image_as_string
    get_real_3d_image_fs_as_string
    get_real_3d_image_sf_as_string
    get_realarray_as_string
---
 pycbf/make_pycbf.w | 45 +++++++++++++++++++++++++++++++--------------
 1 file changed, 31 insertions(+), 14 deletions(-)

diff --git a/pycbf/make_pycbf.w b/pycbf/make_pycbf.w
index 92af09e..6eca2f4 100644
--- a/pycbf/make_pycbf.w
+++ b/pycbf/make_pycbf.w
@@ -549,7 +549,7 @@ cbfhandle_specials = {
 "cbf_get_integerarray":["""
 // Ensure we free the local temporary
 
-%cstring_output_allocate_size(char ** s, int *slen, free(*$1))
+%bytestring_output_allocate_size(char ** s, int *slen, free(*$1))
        get_integerarray_as_string;
 
 // Get the length correct
@@ -583,7 +583,7 @@ cbfhandle_specials = {
 "cbf_get_image":["""
 // Ensure we free the local temporary
 
-%cstring_output_allocate_size(char ** s, int *slen, free(*$1))
+%bytestring_output_allocate_size(char ** s, int *slen, free(*$1))
        get_image_as_string;
 
 // Get the length correct
@@ -611,7 +611,7 @@ cbfhandle_specials = {
 "cbf_get_image_fs":["""
 // Ensure we free the local temporary
 
-%cstring_output_allocate_size(char ** s, int *slen, free(*$1))
+%bytestring_output_allocate_size(char ** s, int *slen, free(*$1))
        get_image_fs_as_string;
 
 // Get the length correct
@@ -639,7 +639,7 @@ cbfhandle_specials = {
 "cbf_get_image_sf":["""
 // Ensure we free the local temporary
 
-%cstring_output_allocate_size(char ** s, int *slen, free(*$1))
+%bytestring_output_allocate_size(char ** s, int *slen, free(*$1))
        get_image_fs_as_string;
 
 // Get the length correct
@@ -667,7 +667,7 @@ cbfhandle_specials = {
 "cbf_get_real_image":["""
 // Ensure we free the local temporary
 
-%cstring_output_allocate_size(char ** s, int *slen, free(*$1))
+%bytestring_output_allocate_size(char ** s, int *slen, free(*$1))
        get_real_image_as_string;
 
 // Get the length correct
@@ -695,7 +695,7 @@ cbfhandle_specials = {
 "cbf_get_real_image_fs":["""
 // Ensure we free the local temporary
 
-%cstring_output_allocate_size(char ** s, int *slen, free(*$1))
+%bytestring_output_allocate_size(char ** s, int *slen, free(*$1))
        get_real_image_fs_as_string;
 
 // Get the length correct
@@ -723,7 +723,7 @@ cbfhandle_specials = {
 "cbf_get_real_image_sf":["""
 // Ensure we free the local temporary
 
-%cstring_output_allocate_size(char ** s, int *slen, free(*$1))
+%bytestring_output_allocate_size(char ** s, int *slen, free(*$1))
        get_real_image_sf_as_string;
 
 // Get the length correct
@@ -751,7 +751,7 @@ cbfhandle_specials = {
 "cbf_get_3d_image":["""
 // Ensure we free the local temporary
 
-%cstring_output_allocate_size(char ** s, int *slen, free(*$1))
+%bytestring_output_allocate_size(char ** s, int *slen, free(*$1))
        get_3d_image_as_string;
 
 // Get the length correct
@@ -779,7 +779,7 @@ cbfhandle_specials = {
 "cbf_get_3d_image_fs":["""
 // Ensure we free the local temporary
 
-%cstring_output_allocate_size(char ** s, int *slen, free(*$1))
+%bytestring_output_allocate_size(char ** s, int *slen, free(*$1))
        get_3d_image_fs_as_string;
 
 // Get the length correct
@@ -807,7 +807,7 @@ cbfhandle_specials = {
 "cbf_get_3d_image_sf":["""
 // Ensure we free the local temporary
 
-%cstring_output_allocate_size(char ** s, int *slen, free(*$1))
+%bytestring_output_allocate_size(char ** s, int *slen, free(*$1))
        get_3d_image_sf_as_string;
 
 // Get the length correct
@@ -835,7 +835,7 @@ cbfhandle_specials = {
 "cbf_get_real_3d_image":["""
 // Ensure we free the local temporary
 
-%cstring_output_allocate_size(char ** s, int *slen, free(*$1))
+%bytestring_output_allocate_size(char ** s, int *slen, free(*$1))
        get_real_3d_image_as_string;
 
 // Get the length correct
@@ -863,7 +863,7 @@ cbfhandle_specials = {
 "cbf_get_real_3d_image_fs":["""
 // Ensure we free the local temporary
 
-%cstring_output_allocate_size(char ** s, int *slen, free(*$1))
+%bytestring_output_allocate_size(char ** s, int *slen, free(*$1))
        get_real_3d_image_fs_as_string;
 
 // Get the length correct
@@ -890,7 +890,7 @@ cbfhandle_specials = {
 "cbf_get_real_3d_image_sf":["""
 // Ensure we free the local temporary
 
-%cstring_output_allocate_size(char ** s, int *slen, free(*$1))
+%bytestring_output_allocate_size(char ** s, int *slen, free(*$1))
        get_real_3d_image_sf_as_string;
 
 // Get the length correct
@@ -918,7 +918,7 @@ cbfhandle_specials = {
 "cbf_get_realarray":["""
 // Ensure we free the local temporary
 
-%cstring_output_allocate_size(char ** s, int *slen, free(*$1))
+%bytestring_output_allocate_size(char ** s, int *slen, free(*$1))
        get_realarray_as_string;
 
 // Get the length correct
@@ -2517,6 +2517,23 @@ typedef enum
 }
 CBF_NODETYPE;
 
+// Tell SWIG to return a string-output-argument as a bytestring
+%define %bytestring_output_allocate_size(TYPEMAP, SIZE, RELEASE)
+   %typemap(in,noblock=1,numinputs=0) (TYPEMAP, SIZE) ($*1_ltype temp = 0, $*2_ltype tempn) {
+      $1 = &temp; $2 = &tempn;
+   }
+   %typemap(freearg,match="in") (TYPEMAP, SIZE) "";
+   %typemap(argout,noblock=1)(TYPEMAP, SIZE) {
+      if (*$1) {
+%#if PY_VERSION_HEX >= 0x03000000
+         %append_output(PyBytes_FromStringAndSize(*$1,*$2));
+%#else
+         %append_output(SWIG_FromCharPtrAndSize(*$1,*$2));
+%#endif
+         RELEASE;
+      }
+   }
+%enddef
 
 // Tell SWIG what the object is, so we can build the class
 
