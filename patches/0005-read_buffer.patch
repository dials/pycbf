From 925007aeb2c8d9a2bb712f3529ddd930152a9b6b Mon Sep 17 00:00:00 2001
From: Nicholas Devenish <ndevenish@gmail.com>
Date: Fri, 14 May 2021 15:01:16 +0100
Subject: [PATCH] Add python bindings for cbf_read_buffered_file

This means that you can pre-read a CBF file and pass it to CBFlib, so that
you don't have to do multiple system-calls.

Injected directly into make_pycbf.w(py) rather than editing the CBFlib.html.
---
 pycbf/make_pycbf.w | 34 ++++++++++++++++++++++++++++++++++
 1 file changed, 34 insertions(+)

diff --git a/pycbf/make_pycbf.w b/pycbf/make_pycbf.w
index 018f92f..05a0585 100644
--- a/pycbf/make_pycbf.w
+++ b/pycbf/make_pycbf.w
@@ -205,6 +205,17 @@ while i<len(lines)-1:
 
 # End of CBFlib.txt file - now generate wrapper code for swig
 
+# Inject functions directly
+name_dict["cbf_read_buffered_file"] = [
+   "int cbf_read_buffered_file (cbf_handle handle, FILE *stream, int flags, const char * buffer, size_t buffer_len)",
+   """
+Read from a bytes buffer instead of a file.
+
+Args:
+   buffer (bytes): The python bytes-buffer to read from.
+   flags (int): Same meaning as for read_file
+"""
+]
 
 def myformat(s,l,indent=0,breakon=" "):
    """
@@ -1758,6 +1769,29 @@ cbfhandle_specials = {
        }
 ""","read_file",["String filename","Integer headers"],[]],
 
+"cbf_read_buffered_file": ["""
+    %exception read_buffer {
+        $function
+        if (PyErr_Occurred()) {
+            return NULL;
+        }
+    }
+
+    void read_buffer(PyObject *buffer, int flags = 0) {
+        if (!PyBytes_Check(buffer)) {
+            PyErr_SetString(PyExc_ValueError, "buffer must be a bytes-like object");
+        }
+
+        Py_ssize_t buffer_length = PyBytes_Size(buffer);
+        char *cbuffer = PyBytes_AsString(buffer);
+
+        int err = cbf_read_buffered_file(self, NULL /*nullptr*/, flags, cbuffer, buffer_length);
+
+        if (err) {
+            PyErr_Format(PyExc_RuntimeError, "cbflib read_file returned error %d", err);
+        }
+    }
+""", "read_buffer", ["Bytes object", "Integer Flags"], []],
 
 
 "cbf_read_widefile" : ["""
