diff --git a/pycbf/make_pycbf.w b/pycbf/make_pycbf.w
index 6eca2f4..6162e74 100644
--- a/pycbf/make_pycbf.w
+++ b/pycbf/make_pycbf.w
@@ -952,7 +952,7 @@ cbfhandle_specials = {
     /* CBFlib must NOT modify the data string which belongs to the scripting
        language we will get and check the length via a typemap */
 
-%apply (char *STRING, int LENGTH) { (char *data, int len) } set_integerarray;
+%apply (char *DATASTRING, int LENGTH) { (char *data, int len) } set_integerarray;
 
     void set_integerarray(unsigned int compression, int binary_id,
              char *data, int len, int elsize, int elsigned, int elements){
@@ -979,7 +979,7 @@ cbfhandle_specials = {
        which belongs to the scripting
        language we will get and check the length via a typemap */
 
-%apply (char *STRING, int LENGTH) { (char *data, int len) } set_integerarray_wdims;
+%apply (char *DATASTRING, int LENGTH) { (char *data, int len) } set_integerarray_wdims;
 %apply (char *STRING, int LENGTH) { (char *bo, int bolen) } set_integerarray_wdims;
 
     void set_integerarray_wdims(unsigned int compression, int binary_id,
@@ -1012,7 +1012,7 @@ cbfhandle_specials = {
        which belongs to the scripting
        language we will get and check the length via a typemap */
 
-%apply (char *STRING, int LENGTH) { (char *data, int len) } set_integerarray_wdims_sf;
+%apply (char *DATASTRING, int LENGTH) { (char *data, int len) } set_integerarray_wdims_sf;
 %apply (char *STRING, int LENGTH) { (char *bo, int bolen) } set_integerarray_wdims_sf;
 
     void set_integerarray_wdims_sf(unsigned int compression, int binary_id,
@@ -1044,7 +1044,7 @@ cbfhandle_specials = {
        which belongs to the scripting
        language we will get and check the length via a typemap */
 
-%apply (char *STRING, int LENGTH) { (char *data, int len) } set_integerarray_wdims_fs;
+%apply (char *DATASTRING, int LENGTH) { (char *data, int len) } set_integerarray_wdims_fs;
 %apply (char *STRING, int LENGTH) { (char *bo, int bolen) } set_integerarray_wdims_fs;
 
     void set_integerarray_wdims_fs(unsigned int compression, int binary_id,
@@ -1076,7 +1076,7 @@ cbfhandle_specials = {
     /* CBFlib must NOT modify the data string which belongs to the scripting
        language we will get and check the length via a typemap */
 
-%apply (char *STRING, int LENGTH) { (char *data, int len) } set_realarray;
+%apply (char *DATASTRING, int LENGTH) { (char *data, int len) } set_realarray;
 
     void set_realarray(unsigned int compression, int binary_id,
              char *data, int len, int elsize, int elements){
@@ -1103,7 +1103,7 @@ cbfhandle_specials = {
        which belongs to the scripting
        language we will get and check the length via a typemap */
 
-%apply (char *STRING, int LENGTH) { (char *data, int len) } set_realarray_wdims;
+%apply (char *DATASTRING, int LENGTH) { (char *data, int len) } set_realarray_wdims;
 %apply (char *STRING, int LENGTH) { (char *bo, int bolen) } set_realarray_wdims;
 
     void set_realarray_wdims(unsigned int compression, int binary_id,
@@ -1136,7 +1136,7 @@ cbfhandle_specials = {
        which belongs to the scripting
        language we will get and check the length via a typemap */
 
-%apply (char *STRING, int LENGTH) { (char *data, int len) } set_realarray_wdims_sf;
+%apply (char *DATASTRING, int LENGTH) { (char *data, int len) } set_realarray_wdims_sf;
 %apply (char *STRING, int LENGTH) { (char *bo, int bolen) } set_realarray_wdims_sf;
 
     void set_realarray_wdims_sf(unsigned int compression, int binary_id,
@@ -1169,7 +1169,7 @@ cbfhandle_specials = {
        which belongs to the scripting
        language we will get and check the length via a typemap */
 
-%apply (char *STRING, int LENGTH) { (char *data, int len) } set_realarray_wdims_fs;
+%apply (char *DATASTRING, int LENGTH) { (char *data, int len) } set_realarray_wdims_fs;
 %apply (char *STRING, int LENGTH) { (char *bo, int bolen) } set_realarray_wdims_fs;
 
     void set_realarray_wdims_fs(unsigned int compression, int binary_id,
@@ -1201,7 +1201,7 @@ cbfhandle_specials = {
     /* CBFlib must NOT modify the data string which belongs to the scripting
        language we will get and check the length via a typemap */
 
-%apply (char *STRING, int LENGTH) { (char *data, int len) } set_image;
+%apply (char *DATASTRING, int LENGTH) { (char *data, int len) } set_image;
 
     void set_image(unsigned int element_number,
              unsigned int compression,
@@ -1229,7 +1229,7 @@ cbfhandle_specials = {
     /* CBFlib must NOT modify the data string which belongs to the scripting
        language we will get and check the length via a typemap */
 
-%apply (char *STRING, int LENGTH) { (char *data, int len) } set_image;
+%apply (char *DATASTRING, int LENGTH) { (char *data, int len) } set_image;
 
     void set_image_fs(unsigned int element_number,
              unsigned int compression,
@@ -1257,7 +1257,7 @@ cbfhandle_specials = {
     /* CBFlib must NOT modify the data string which belongs to the scripting
        language we will get and check the length via a typemap */
 
-%apply (char *STRING, int LENGTH) { (char *data, int len) } set_image_sf;
+%apply (char *DATASTRING, int LENGTH) { (char *data, int len) } set_image_sf;
 
     void set_image_sf(unsigned int element_number,
              unsigned int compression,
@@ -1285,7 +1285,7 @@ cbfhandle_specials = {
     /* CBFlib must NOT modify the data string which belongs to the scripting
        language we will get and check the length via a typemap */
 
-%apply (char *STRING, int LENGTH) { (char *data, int len) } set_real_image;
+%apply (char *DATASTRING, int LENGTH) { (char *data, int len) } set_real_image;
 
     void set_real_image(unsigned int element_number,
              unsigned int compression,
@@ -1313,7 +1313,7 @@ cbfhandle_specials = {
     /* CBFlib must NOT modify the data string which belongs to the scripting
        language we will get and check the length via a typemap */
 
-%apply (char *STRING, int LENGTH) { (char *data, int len) } set_real_image;
+%apply (char *DATASTRING, int LENGTH) { (char *data, int len) } set_real_image;
 
     void set_real_image_fs(unsigned int element_number,
              unsigned int compression,
@@ -1341,7 +1341,7 @@ cbfhandle_specials = {
     /* CBFlib must NOT modify the data string which belongs to the scripting
        language we will get and check the length via a typemap */
 
-%apply (char *STRING, int LENGTH) { (char *data, int len) } set_real_image_sf;
+%apply (char *DATASTRING, int LENGTH) { (char *data, int len) } set_real_image_sf;
 
     void set_real_image_sf(unsigned int element_number,
              unsigned int compression,
@@ -1369,7 +1369,7 @@ cbfhandle_specials = {
     /* CBFlib must NOT modify the data string which belongs to the scripting
        language we will get and check the length via a typemap */
 
-%apply (char *STRING, int LENGTH) { (char *data, int len) } set_3d_image;
+%apply (char *DATASTRING, int LENGTH) { (char *data, int len) } set_3d_image;
 
     void set_3d_image(unsigned int element_number,
              unsigned int compression,
@@ -1397,7 +1397,7 @@ cbfhandle_specials = {
     /* CBFlib must NOT modify the data string which belongs to the scripting
        language we will get and check the length via a typemap */
 
-%apply (char *STRING, int LENGTH) { (char *data, int len) } set_3d_image;
+%apply (char *DATASTRING, int LENGTH) { (char *data, int len) } set_3d_image;
 
     void set_3d_image_fs(unsigned int element_number,
              unsigned int compression,
@@ -1425,7 +1425,7 @@ cbfhandle_specials = {
     /* CBFlib must NOT modify the data string which belongs to the scripting
        language we will get and check the length via a typemap */
 
-%apply (char *STRING, int LENGTH) { (char *data, int len) } set_3d_image;
+%apply (char *DATASTRING, int LENGTH) { (char *data, int len) } set_3d_image;
 
     void set_3d_image_sf(unsigned int element_number,
              unsigned int compression,
@@ -1453,7 +1453,7 @@ cbfhandle_specials = {
     /* CBFlib must NOT modify the data string which belongs to the scripting
        language we will get and check the length via a typemap */
 
-%apply (char *STRING, int LENGTH) { (char *data, int len) } set_real_3d_image_sf;
+%apply (char *DATASTRING, int LENGTH) { (char *data, int len) } set_real_3d_image_sf;
 
     void set_real_3d_image(unsigned int element_number,
              unsigned int compression,
@@ -1481,7 +1481,7 @@ cbfhandle_specials = {
     /* CBFlib must NOT modify the data string which belongs to the scripting
        language we will get and check the length via a typemap */
 
-%apply (char *STRING, int LENGTH) { (char *data, int len) } set_real_3d_image_fs;
+%apply (char *DATASTRING, int LENGTH) { (char *data, int len) } set_real_3d_image_fs;
 
     void set_real_3d_image_fs(unsigned int element_number,
              unsigned int compression,
@@ -1509,7 +1509,7 @@ cbfhandle_specials = {
     /* CBFlib must NOT modify the data string which belongs to the scripting
        language we will get and check the length via a typemap */
 
-%apply (char *STRING, int LENGTH) { (char *data, int len) } set_real_3d_image_sf;
+%apply (char *DATASTRING, int LENGTH) { (char *data, int len) } set_real_3d_image_sf;
 
     void set_real_3d_image_sf(unsigned int element_number,
              unsigned int compression,
@@ -2535,6 +2535,20 @@ CBF_NODETYPE;
    }
 %enddef
 
+// Typemap to read a python bytes object as array data
+%typemap(in,noblock=1)
+  (char *DATASTRING, size_t LENGTH) (int res, char *buf = 0, Py_ssize_t size = 0),
+  (const char *DATASTRING, size_t LENGTH) (int res, char *buf = 0, Py_ssize_t size = 0)
+{
+   res = PyBytes_AsStringAndSize($input, &buf, &size) == -1 ? SWIG_TypeError : SWIG_OK;
+   if (!SWIG_IsOK(res)) {
+      %argument_fail(res,"$type",$symname, $argnum);
+   }
+   $1 = %reinterpret_cast(buf, $1_ltype);
+   $2 = %numeric_cast(size, $2_ltype);
+}
+%typemap(in) (char *DATASTRING, int LENGTH) = (char *DATASTRING, size_t LENGTH);
+
 // Tell SWIG what the object is, so we can build the class
 
 typedef struct

